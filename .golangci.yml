# GolangCI-Lint config.

run:
  timeout: 5m


linters:
  disable-all: true
  enable:

    # Check for pass []any as any in variadic func(...any).
    - asasalint

    # Simple linter to check that your code does not contain non-ASCII identifiers.
    - asciicheck

    # Checks for dangerous unicode character sequences.
    - bidichk

    # Checks whether HTTP response body is closed successfully.
    - bodyclose

    # Detects structs that contain a context.Context field.
    - containedctx

    # Checks whether functions use a non-inherited context.
    - contextcheck

    # Checks function and package cyclomatic complexity.
    - cyclop

    # Check for two durations multiplied together.
    - durationcheck

    # A program for checking for unchecked errors in go programs.
    # These unchecked errors can be critical bugs in some cases.
    - errcheck

    # Checks types passed to the json encoding functions. Reports unsupported types and
    # optionally reports occasions, where the check for the returned error can be omitted.
    - errchkjson

    # Checks that sentinel errors are prefixed with
    # Err and error types are suffixed with Error.
    - errname

    # A linter that can be used to find code that will cause problems
    # with the error wrapping scheme introduced in Go 1.13.
    - errorlint

    # Check exhaustiveness of enum switch statements.
    - exhaustive

    # Checks for pointers to enclosing loop variables.
    - exportloopref

    # Finds forced type assertions.
    - forcetypeassert

    # Controls golang package import order and makes it always deterministic.
    - gci

    # Checks that go compiler directive comments (//go:) are valid.
    - gocheckcompilerdirectives

    # Finds repeated strings that could be replaced by a constant.
    - goconst

    # Check if comments conform to certain rules (like ending with a dot).
    - godot

    # Go linter to check the errors handling expressions.
    - err113

    # Gofmt checks whether code was gofmt-ed.
    - gofmt

    # Gofumpt checks whether code was gofumpt-ed.
    - gofumpt

    # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomoddirectives

    # Checks that printf-like functions are named with f at the end.
    - goprintffuncname

    # Inspects source code for security problems.
    - gosec

    # Linter for Go source code that specializes in simplifying code.
    - gosimple

    # Vet examines Go source code and reports suspicious constructs, such as
    # Printf calls whose arguments do not align with the format string.
    - govet

    # An analyzer to analyze expression groups.
    - grouper

    # Detects when assignments to existing variables are not used.
    - ineffassign

    # Finds slice declarations with non-zero initial length.
    - makezero

    # Finds commonly misspelled English words in comments.
    - misspell

    # Enforces field tags in (un)marshaled structs.
    - musttag

    # Finds naked returns in functions greater than a specified function length.
    - nakedret

    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilerr

    # Checks that there is no simultaneous return of nil error and an invalid value.
    - nilnil

    # Checks for a new line before return and branch statements to increase code clarity.
    - nlreturn

    # Finds sending http request without context.Context.
    - noctx

    # Reports ill-formed or insufficient nolint directives
    - nolintlint

    # Reports all named returns.
    - nonamedreturns

    # Checks for misuse of Sprintf to construct a host with port in a URL.
    - nosprintfhostport

    # Detects missing usage of t.Parallel() method in your Go test.
    - paralleltest

    # Finds slice declarations that could potentially be pre-allocated.
    - prealloc

    # Find code that shadows one of Go's predeclared identifiers.
    - predeclared

    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - revive

    # It's a set of rules from staticcheck. It's not the same thing as the
    # staticcheck binary. The author of staticcheck doesn't support or
    # approve the use of staticcheck as a library inside golangci-lint.
    - staticcheck

    # Checks the struct tags.
    - tagliatelle

    # Analyzer that detects using os.Setenv instead of t.Setenv since Go1.17.
    - tenv

    # Detects Go test helpers without t.Helper() call and checks the consistency of test helpers.
    - thelper

    # Detects inappropriate usage of t.Parallel() method in your Go test codes.
    - tparallel

    # Like the front-end of a Go compiler, parses and type-checks Go code.
    - typecheck

    # Remove unnecessary type conversions.
    - unconvert

    # Reports unused function parameters.
    - unparam

    # Checks Go code for unused constants, variables, functions and types.
    - unused

    # A linter that detect the possibility to use variables/constants from the Go standard library.
    - usestdlibvars

    # Checks that the length of a variable's name matches its scope.
    - varnamelen

    # Finds wasted assignment statements.
    - wastedassign

    # Checks that errors returned from external packages are wrapped.
    - wrapcheck

    # Tool for detection of FIXME, TODO and other comment keywords.
    #- godox (introduce and fix later on)

    # Accept interfaces, return concrete types.
    #- ireturn (a pretty extreme measure, but might be worth it)

    # Reports long lines.
    #- lll (introduce and fix later on)

    # Reports deeply nested if statements.
    #- nestif (introduce and fix later on)

    # Tool for detection of leading and trailing whitespace.
    #- whitespace (a pretty hard measure, but might be worth it)

    # Whitespace Linter - Forces you to use empty lines!
    #- wsl (a pretty hard measure, but might be worth it)

    #
    # might be interesting:
    #
    # decorder, depguard, dupl, gochecknoglobals, forbidigo, funlen?, gocritic, goheader, gomodguard,
    # grouper, importas, nolintlint, paralleltest, prealloc, revive, stylecheck, testpackage, ginkgolinter
    # thelper, tparallel, exhaustruct, gomnd, nlreturn, nonamedreturns, gochecknoinits, interfacebloat, loggercheck,
    # reassign, testpackage
    #


linters-settings:

  cyclop:
    max-complexity: 17
    package-average: 0.0
    skip-tests: false

  errcheck:
    check-type-assertions: true
    check-blank: false # TODO: activate?
    disable-default-exclusions: true
    exclude-functions: []

  exhaustive:
    check-generated: false
    default-signifies-exhaustive: true
    ignore-enum-members: ""
    package-scope-only: false

  gci:
    sections:
      - standard
      - default
      - prefix(golang.org)
      - prefix(go.wohnparc.dev)
    skip-generated: true

  goconst:
    min-len: 3
    min-occurrences: 4 # TODO: go back to 3!
    ignore-tests: true
    match-constant: true
    numbers: true
    min: 3
    max: 3
    ignore-calls: true

  godot:
    scope: declarations
    exclude: []
    period: true
    capital: false

  gofmt:
    simplify: true

  goimports:
    local-prefixes: ""

  gomoddirectives:
    replace-local: true
    replace-allow-list:
      - go.wohnparc.dev
    retract-allow-no-explanation: false
    exclude-forbidden: false

  gosec:
    includes: []
    excludes: []
    exclude-generated: false
    severity: low
    confidence: low

  gosimple:
    checks: ["*"]

  govet:
    check-shadowing: false
    disable-all: false
    enable: []
    enable-all: false
    disable: []

  grouper:
    # Require the use of a single global 'const' declaration only.
    # Default: false
    const-require-single-const: false
    # Require the use of grouped global 'const' declarations.
    # Default: false
    const-require-grouping: true
    # Require the use of a single 'import' declaration only.
    # Default: false
    import-require-single-import: true
    # Require the use of grouped 'import' declarations.
    # Default: false
    import-require-grouping: true
    # Require the use of a single global 'type' declaration only.
    # Default: false
    type-require-single-type: false
    # Require the use of grouped global 'type' declarations.
    # Default: false
    type-require-grouping: false
    # Require the use of a single global 'var' declaration only.
    # Default: false
    var-require-single-var: false
    # Require the use of grouped global 'var' declarations.
    # Default: false
    var-require-grouping: true

  misspell:
    ignore-words: []

  nakedret:
    max-func-lines: 30

  nestif:
    min-complexity: 5

  nilnil:
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  nolintlint:
    allow-unused: false
    allow-no-explanation: []
    require-explanation: true
    require-specific: true

  predeclared:
    ignore: ""
    q: false

  revive:
    # Maximum number of open files at the same time.
    # See https://github.com/mgechev/revive#command-line-flags
    # Defaults to unlimited.
    max-open-files: 2048
    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: false
    ignore-generated-header: true
    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    severity: error
    # Enable all available rules.
    # Default: false
    enable-all-rules: false
    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    confidence: 0.5
    rules:
      - name: add-constant
        arguments:
          - maxLitCount: "3"
            allowInts: "0,1,-1"
            ignoreFuncs: "fmt\\.Errorf"
      - name: line-length-limit
        arguments: [ 120 ]

  staticcheck:
    checks: ["*"]

  tagliatelle:
    case:
      use-field-name: true
      rules:
        bson: snake
        json: snake
        mapstructure: snake
        xml: camel
        yaml: snake

  unparam:
    check-exported: false

  varcheck:
    exported-fields: false

  varnamelen:
    max-distance: 5
    min-name-length: 3
    check-receiver: false
    check-return: false
    check-type-param: false
    ignore-type-assert-ok: true
    ignore-map-index-ok: true
    ignore-chan-recv-ok: true
    ignore-names:
      - err
      - ok
      - id
      - fn
      - to
      - os
      - wg
    ignore-decls:
      - wg sync.WaitGroup
      - t T

  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
    ignoreSigRegexps: []
    ignorePackageGlobs: []
    ignoreInterfaceRegexps: []

    wsl:
      allow-assign-and-anything: false
      allow-assign-and-call: true
      allow-cuddle-declarations: false
      allow-multiline-assign: true
      allow-separated-leading-comment: false
      allow-trailing-comment: false
      force-case-trailing-whitespace: 0
      force-err-cuddling: true
      force-short-decl-cuddling: true
      strict-append: true


issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  new: false
  fix: true
